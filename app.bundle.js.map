{"version":3,"file":"app.bundle.js","mappings":"oBAYA,WAEE,MAAMA,EAAWC,SAASC,cAAc,aAClCC,EAAiBF,SAASC,cAAc,mBACxCE,EAAiBD,EAAeE,SAASC,UACzCC,EAAaN,SAASC,cAAc,kBAyB1C,SAASM,IACP,MAAMC,EAAcC,aAAaC,QAAQ,SACnCC,EAAQC,KAAKC,MAAML,GAGzB,OAAIM,MAAMC,QAAQJ,GACTA,EAEA,EAEX,CAjCAT,EAAec,iBAAiB,UAAWC,IACzCA,EAAMC,kBAkCR,SAAmBC,GAEjB,MAAMR,EAAQJ,IAGRa,EAuFR,SAA4BD,GAC1B,MAAME,GAAM,IAAIC,KAGhB,MAAO,CAAED,KAAIF,QAAOI,aAFA,EAGtB,CA5FkBC,CAAmBL,GAG7BM,EAAW,IAAId,EAAOS,GACtBM,EAAiBd,KAAKe,UAAUF,GACtChB,aAAamB,QAAQ,QAASF,EAChC,CAvCEG,CAHkB1B,EAAe2B,OAmIjC3B,EAAe2B,MAAQ,GA1HvBC,GAAQ,IAGVzB,EAAWU,iBAAiB,SAAS,MAoErC,SAAyBK,GACvB,MAAMV,EAAQ,GACdF,aAAamB,QAAQ,QAAShB,KAAKe,UAAUhB,GAC/C,CAtEEqB,GAGAD,GAAQ,IAwFV,MAAME,EAAoBC,GACjB,gCACkBA,EAAKX,YAAc,YAAc,gBAAgBW,EAAKb,mGAI9Da,EAAKb,mBACda,EAAKX,YAAc,UAAY,qEAG/BW,EAAKf,mEAE0Be,EAAKb,8FAkB9C,SAASU,IACP,MAAMpB,EAAQJ,IAEdR,EAASoC,UAAY,GACrB,IAAK,MAAMD,KAAQvB,EAAMyB,aAAc,CACrC,MAAMC,EAAiBJ,EAAiBC,GACxCnC,EAASoC,WAAaE,CACxB,EAKF,WAC2BtC,EAASuC,iBAAiB,WAClCC,SAASC,IACxBA,EAAexB,iBAAiB,UAAWC,IACzC,MAAMwB,EAASxB,EAAMyB,cAAcC,QAAQtB,GAEvCJ,EAAM2B,OAAOC,QA5GvB,SAA6BxB,GAE3B,MAGMI,EAHQlB,IAGSuC,KAAKZ,IACtBA,EAAKb,IAAMA,IACba,EAAKX,aAAc,GAGdW,KAIHR,EAAiBd,KAAKe,UAAUF,GACtChB,aAAamB,QAAQ,QAASF,EAChC,CA6FQqB,CAAoBN,GA3F5B,SAA+BpB,GAE7B,MAGMI,EAHQlB,IAGSuC,KAAKZ,IACtBA,EAAKb,IAAMA,IACba,EAAKX,aAAc,GAGdW,KAIHR,EAAiBd,KAAKe,UAAUF,GACtChB,aAAamB,QAAQ,QAASF,EAChC,CA6EQsB,CAAsBP,GAIxBV,GAAQ,GACR,IAGmBhC,EAASuC,iBAAiB,YAClCC,SAASU,IACtBA,EAAcjC,iBAAiB,SAAUC,KAhF7C,SAAqBI,GAEnB,MAAMV,EAAQJ,IAGR2B,EAAOvB,EAAMuC,MAAMhB,GAASA,EAAKb,IAAMA,IAI7C,IAAe,IAHDV,EAAMwC,QAAQjB,GAGV,OAAOvB,EAGzB,MAAMc,EAAWd,EAAMyC,QAAQlB,GACtBA,EAAKb,IAAMA,IAEdK,EAAiBd,KAAKe,UAAUF,GACtChB,aAAamB,QAAQ,QAASF,EAChC,CAkEM2B,CAFepC,EAAMyB,cAAcC,QAAQtB,IAK3CU,GAAQ,GACR,GAEN,CA/BEuB,EACF,CAgCAvB,GACD,CA5LD,E","sources":["webpack://todoapp/./src/scripts.js"],"sourcesContent":["import './styles.css';\r\n\r\n/** DATA SCHEMA\r\n[\r\n  {\r\n    id: Number,\r\n    title: String,\r\n    isCompleted: Boolean,\r\n  }\r\n]\r\n*/\r\n\r\n(function () {\r\n  // Get elements\r\n  const todoList = document.querySelector('#todoList');\r\n  const createTodoForm = document.querySelector('#createTodoForm');\r\n  const todoTitleInput = createTodoForm.elements.todoTitle;\r\n  const clearTodos = document.querySelector('#clearTodosBtn');\r\n\r\n  createTodoForm.addEventListener('submit', (event) => {\r\n    event.preventDefault();\r\n\r\n    // Get todo title value\r\n    const todoTitle = todoTitleInput.value;\r\n\r\n    // Store new todo\r\n    storeTodo(todoTitle);\r\n\r\n    // Clear input data from user\r\n    clearForm();\r\n\r\n    // Rerender/Update UI\r\n    render();\r\n  });\r\n\r\n  clearTodos.addEventListener('click', () => {\r\n    destroyAllTodos();\r\n\r\n    // Rerender/Update UI\r\n    render();\r\n  });\r\n\r\n  function getAllTodos() {\r\n    const todosString = localStorage.getItem('todos');\r\n    const todos = JSON.parse(todosString);\r\n\r\n    // Return empty array if nothing saved\r\n    if (Array.isArray(todos)) {\r\n      return todos;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  function storeTodo(title) {\r\n    // Get all current todos\r\n    const todos = getAllTodos();\r\n\r\n    // Get todo object\r\n    const newTodo = generateTodoObject(title);\r\n\r\n    // Storing new todo to current todos\r\n    const newTodos = [...todos, newTodo];\r\n    const newTodosString = JSON.stringify(newTodos);\r\n    localStorage.setItem('todos', newTodosString);\r\n  }\r\n\r\n  function markAsTodoCompleted(id) {\r\n    // Get all current todos\r\n    const todos = getAllTodos();\r\n\r\n    // Update selected todo to completed\r\n    const newTodos = todos.map((todo) => {\r\n      if (todo.id == id) {\r\n        todo.isCompleted = true;\r\n      }\r\n\r\n      return todo;\r\n    });\r\n\r\n    // Updating current todos\r\n    const newTodosString = JSON.stringify(newTodos);\r\n    localStorage.setItem('todos', newTodosString);\r\n  }\r\n\r\n  function markAsTodoUncompleted(id) {\r\n    // Get all current todos\r\n    const todos = getAllTodos();\r\n\r\n    // Updating selected todo to completed\r\n    const newTodos = todos.map((todo) => {\r\n      if (todo.id == id) {\r\n        todo.isCompleted = false;\r\n      }\r\n\r\n      return todo;\r\n    });\r\n\r\n    // Updating current todos\r\n    const newTodosString = JSON.stringify(newTodos);\r\n    localStorage.setItem('todos', newTodosString);\r\n  }\r\n\r\n  function destroyAllTodos(id) {\r\n    const todos = [];\r\n    localStorage.setItem('todos', JSON.stringify(todos));\r\n  }\r\n\r\n  function destroyTodo(id) {\r\n    // Get all current todos\r\n    const todos = getAllTodos();\r\n\r\n    // Get todo by id\r\n    const todo = todos.find((todo) => todo.id == id);\r\n    const index = todos.indexOf(todo);\r\n\r\n    // Check founded todo is available\r\n    if (index === -1) return todos;\r\n\r\n    // Deleting selected todo from todos\r\n    const newTodos = todos.filter((todo) => {\r\n      return todo.id != id;\r\n    });\r\n    const newTodosString = JSON.stringify(newTodos);\r\n    localStorage.setItem('todos', newTodosString);\r\n  }\r\n\r\n  const todoItemTemplate = (todo) => {\r\n    return `\r\n      <li class=\"todo-item ${todo.isCompleted ? 'completed' : ''}\" data-id=\"${todo.id}\">\r\n        <input\r\n          class=\"toggle\" \r\n          type=\"checkbox\" \r\n          data-id=\"${todo.id}\" \r\n          ${todo.isCompleted ? 'checked' : ''}\r\n        />\r\n        <div class=\"todo-item__title\">\r\n          ${todo.title}\r\n        </div>\r\n        <button class=\"destroy\" data-id=\"${todo.id}\">\r\n          <i class=\"fa-solid fa-trash-can\"></i>\r\n        </button>\r\n      </li>\r\n    `;\r\n  };\r\n\r\n  function generateTodoObject(title) {\r\n    const id = +new Date();\r\n    const isCompleted = false;\r\n\r\n    return { id, title, isCompleted };\r\n  }\r\n\r\n  function clearForm() {\r\n    todoTitleInput.value = '';\r\n  }\r\n\r\n  function render() {\r\n    const todos = getAllTodos();\r\n\r\n    todoList.innerHTML = '';\r\n    for (const todo of todos.toReversed()) {\r\n      const newTodoElement = todoItemTemplate(todo);\r\n      todoList.innerHTML += newTodoElement;\r\n    }\r\n\r\n    afterRender();\r\n  }\r\n\r\n  function afterRender() {\r\n    const toggleCheckboxes = todoList.querySelectorAll('.toggle');\r\n    toggleCheckboxes.forEach((toggleCheckbox) => {\r\n      toggleCheckbox.addEventListener('change', (event) => {\r\n        const todoId = event.currentTarget.dataset.id;\r\n\r\n        if (event.target.checked) {\r\n          markAsTodoCompleted(todoId);\r\n        } else {\r\n          markAsTodoUncompleted(todoId);\r\n        }\r\n\r\n        // Rerender/Update UI\r\n        render();\r\n      });\r\n    });\r\n\r\n    const destroyButtons = todoList.querySelectorAll('.destroy');\r\n    destroyButtons.forEach((destroyButton) => {\r\n      destroyButton.addEventListener('click', (event) => {\r\n        const todoId = event.currentTarget.dataset.id;\r\n\r\n        destroyTodo(todoId);\r\n\r\n        // Rerender/Update UI\r\n        render();\r\n      });\r\n    });\r\n  }\r\n\r\n  render();\r\n})();\r\n"],"names":["todoList","document","querySelector","createTodoForm","todoTitleInput","elements","todoTitle","clearTodos","getAllTodos","todosString","localStorage","getItem","todos","JSON","parse","Array","isArray","addEventListener","event","preventDefault","title","newTodo","id","Date","isCompleted","generateTodoObject","newTodos","newTodosString","stringify","setItem","storeTodo","value","render","destroyAllTodos","todoItemTemplate","todo","innerHTML","toReversed","newTodoElement","querySelectorAll","forEach","toggleCheckbox","todoId","currentTarget","dataset","target","checked","map","markAsTodoCompleted","markAsTodoUncompleted","destroyButton","find","indexOf","filter","destroyTodo","afterRender"],"sourceRoot":""}